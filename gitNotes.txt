Basic Introduction to Devops
===============================

Devops : Devops is not the tool/ technology as most of the people think. Infact its a culture/process that software companies follow to develop , release and maintenance  of software application/project/product with high quality and in very fast way by using automation tools.

In any software product, there are two group of engineer works:
1. Development group
2. Operation/Non-Development/Administrator(BA)

Development Group: People who are involved in below areas are considered as development group:

1. Planning 
2. Coding
3. Build
4. Testing

Eg
Business analyst/BA
System analyst
design architect
developers
build engineer
test engineer/qa

Operation group: The people who are involved in  below are considered as operation group:

1. Release
2. Deployment
3. Operations
4. Monitoring

Eg.
Configurtion engineer
System admin
Monitoring team

To understand Devops culture, we needs to have understanding of SDLC(software development life cycle)

1. Waterfall model
2. Prototype model
3. INcrementatl/Iterative model
4. Spiral model
5. RAD model
6. Big-bang model
7. Fish model
8. V model
9. Agile model
10. Deveps model

Importal models to discuss:
1. Waterfall model(Linear Sequential model) - Everything works here step by step. Next step can only start when previous one is finished.
Requirement gathering/collection(BA)
`Requirement analysis(SA)
``Design
```Development
````Testing
`````Release
``````Maintenance

This methodology is not frequently used because of the frequent requirement change and less development time.

2. Agile Model:
This is the most frequently used model. This model is divided into multiple sub models
1. Rational unify process(RUP)
2. Adaptive software development(ASD)
3. Feature driven development(FDD)
4. Crystal clear
5. Dynamic software development method(DSDM)
6. Extreme Programming(xp)
7. SCRUM model, etc

Among all these models, SCRUM is most frequently used and popular model.

Agile => Speed
SCRUM =>It is an iterative model in which software product is developed in increment and each incremetn is called as sprint.

SCRUM is derived from Rugby game.
In every sprint 7-9 members will work
each sprint will be delivered from 1 week to 3 weeks.

3. Devops model
Devops and Agile both are different methodologies. However there are some similarities as well :
1. Both are software development methodologies.
2. Both models concentration on rapid software development

Differences:
1. The difference will come once development of the project completed.
Agile model talks about only development but not operation. However, Devops model talks about complete product life cycle like development and operation.


2. In agile model, sepate people are responsilble for development, testing, deployment etc. However  in deveps, the devops engineer is responsible for everything like development to operation and operation to development.

3. Agile model wont force us to use automation tools. However devops model is completely based on automation.

4. Agile is always giving highest priority for speed. But deveops giving priority for quality and speed.

5. In agile, client is responsible for providing feedback. But id devops. immediate feedback is available from the monitoring feedback.

Version Control System tool:
======================================
Verson control system is also known as software configuration management(SCM) or source code management(SCM).

Need of version control system?
-------------------------------
1. Maintaining multiple versions manually is very tedious task.
2. Each and every change should be tracked.
	Who did the change
	when he did the change
	which changes he did etc
3. Overwriting of the code should not happen.

4. Developers have to share their code to peer developers, so that multiple developers will work in collaborative way.
5. Parallel development must be required.

How version control system works:
----------------------------------

Version conrol system always talks about files which contains source code.

Version control is required by developer, tester, manager, architect who ever have multiple version of the file.

========================================
Basic Terminonlogy of Versoin  Control System

Working directory/Workspace => The files where developers create the file and writes the code. WD doesn't have the version.

Repository => In repository, all files are stored in the form of version. Any change in the file is stored in the form of new version.


Commit => When developer make any change in the working directory and save to Repository, this operation is known as commit


Checkout => When developer want any version from repository to current working directory is called as checkout.

========================================
Type of Version Control Systems:
=======================================

1. Centralized Version Control System
2. De-Centralized/Distributed version control system

1. Centralized Version Control System
---------------------------------------
Centralized-> These types of version control system contain only one central repository. Every developer is required to connect with that to continue his work. 

Developers will commit and checkout on central repository server as total project code is stored there.

It is easy to setup but has some limitation:

1. If anything happens to Central Repository server, its difficult to recover the code base as everything is stored in single place.

2. All checkout and commmit operations has to be performed by connecting to Central Repo Server which means all the developers have to be connected to Central Repo. If network outage is there then developer cannot commit or checkout.

3. If no of files or the developers increases, it becomes quite difficult to again manage the code.

2. Distributed Version Control System
------------------------------------------

Repository is distributed.

In this system, every workspace has local repository.

1. All commit and checkout operations will be perfomed locally and hence performance is more.

2. If network outage, still version control is available.

3. There is no question of single point of failure.

commit and checkout:
----------------------
**These operations will be perfomred locally between working directory and repository.
To perform these operations, network is not required.

push & pull operations:
-------------------------
push: The process of sending files from our repository to other's repository.
pull: The process of getting files from other's repository to local repository.

** push and pull will be perfomed between 2 repositories.
These are remote operations.
Compulsory internet should be there.

Distributed VCS with Remote Repository
--------------------------------------

Remote VS Centralized Repository.
1. Commit and checkout operations are performing on local repository not on remote repository.

2. Every developer has their own local repository along with remote repository at server.

Main job of remote repository is to share the complete work to peer developer

GIT
===================

GIT is Distributed version control system tool.

Linux => It is not an operating system. Its is just a Kernal.Operating system name is GNU. It is famous as GNU/Linux
Linus Torvals(Finnish Software Engineer) On his name itself Linux was named and earlier those days every software used to end with (x).
GIT is developed by Linus Torvalds.

Features of GIT:
------------------
1. Distributed Model:
a) No single point of failure.Every developer has local repository.
b) All commit and checkout are performed locally and hence performance and speed is more.
c) Developer workspace needs not to be connected to network always.

2) Staging area:
-----------------
In GIT commit is 2-step process. 
First we have to add files to staging area from working directory and then we can commmit from that staging area to Repository.

Advantage of staging area is we can cross check or double check out changes before commit.

To store 12GB of files, GIT only requires 420 MB. It use Hash alogrith internally.GIT takes snapshot when files are staged from staging area.

3) Branching and Merging:
--------------------------
We can create and work on multiple branches simultaneously and all these branches are isolated from each other. It enables multiple workflows.

5. Freeware and open source:
GIT is free and available on most of the platform.

GIT Architecture:
--------------------
Git has 2 repos:
1. Local Repo
2. Remote Repo

Usually total project code is available in remote repo.

Current work of developer will be stored in local repo.

New files will be created in working directory.
Once work completed, we have to add these files to staging area. For this we have to use command:
git add => Sending files from working directory to staging area

git commit => Staged changes will be moved to local repo.

git push => Move local repo changes to Remote Repo

git clone => Creates  a new local repo from the remote repo

git pull => Gets updated fles from remote repo to local repo

Life Cycle of file in GIT:
---------------------------
Every file in the git, one of the following 4 stages,
1. Untracked
2. Staged
3. Modified
4. In Repository/Commited

Untracked:
---------------
Whenever a new file is created in working directory, GIT is not aware and also do not start tracking it. It starts tracking once the file is added to the staging area.

git status : To known status of all the file in all the area.

Staged:
----------
The files which are added to staging area are said to be in staged state.

git add a.txt => Add only a.txt file to staging area
git add . => Add all the files to staging area
git add a.txt b.txt c.txt => Add multiple files a.txt, b.txt, c.txt to staging area
git add *.txt => Adds all the file with .txt extension to the staging area.

Commited:
---------
The files which is committed is said to be in repository state or committed state. In order to commit the files first user info has to be config

git config --global user.email "abc@gmail.com"
git config --global user.name "abc"

Once user is configured in the git, next time onwards use the command 
For single line commit message
git commit -m "Your message for the commit"
OR
For multiple line commit message
git commit (Enter)
Type commit Message from editor and save

Modified:
-----------
If the file added to staging area or committed, it is tracked by git. Whenever the same file in working directory is update, the status becomes modified

OR

Any file which is already tracked by git,but it is modified in working directory is said to be in modified state.

git log => Command to view lods by version.

How to install git on windows:
-------------------------------

1. Open https://git-scm.com/download/win

2. Click on "Click here to download" Or choose based on your computer bit.

3. Install the executable file.

Steps for using git
Open GitBash

pwd => Shows current working directory

mkdir "Directory Name" => Create a new working directory

cd D:"Directory Name" => Change working directory

ls => shows all the files within the current working directory

ls -a => shows all the files including hidden files from the current working directory

Git by default do not knows which field needs to be track. For that we need to instruct git by following command

git init => Create a empty local repo. It adds a .git(name of local Repo) hidden folder in the working directory and enables version controlling.


cat > A.txt
This is first line.
=> Create a text file with the date in current Working directory.

mv "fileName" "directoryName" => moves file to the specified directory.

At the time of git init => Nothing is tracked. Files has to move to stage inorder to start tracking

git ls-files => Show information about files in the index and the working tree

If git is already initialized than again initiazaling doesn't make any change in staging or commit area. Only some internal memory refresh happens.

git commit -a -m "Commit Message" = >Directly Commit with staging(Only applicable for modified file not for new file)

Example to describe basic GIT commands:
-------------------------------------------------

Create a new project in folder:
mkdir project2

Enter into project2 directory
cd project2

By default version control is not applicable for this workspace(project2).

Now we have to request GIT to start version controlling by following command:

1. git init
---------
Once we create workspace, and if we want version control to be enabled,
we require a local repository ==> .git
If any file starts with . then by default its a hidden directory.

ls -a => Display all files including hidden file

2. git status:
----------------------
It shows the current status of all files in each area, like 
untracked files,
modified files,
stages files, etc.

cat > file1.txt 
First line in file1.txt
=> Creates a new file current working directory

cat > file2.txt 
First line in file2.txt
=> Creates a new file current working directory

if check status again using git status
it will show the file1.txt and file2.txt are untracked

It display verbose output which mean very details output. However if want concise output than use -s with git status
Ex git status -s
?? indicates untracked
A indicates files added to staging area

3.git add
----------------
To add files from working directory to staging area.Once we added files to staging area, then git track these files and ready for commit.

git add file1.txt file2.txt

staging area is also known as index area or cache area. It is logical/virtual area but not physical area

i) To add all files to staging area
	git add . 
	git add *
	git add -a
ii) To add particular files 
	git add file1.txt file2.txt
iii) We can use even regular expression patterns also
	git add *.java
	git add *.txt

git ls-files => Displays which files tracked by git.

4. git commit:
---------------------
If we want to commit staged changes, then we have to use git commit. All the files which are in staging area gets committed to local repo. 

git commit -m "commit message"

In order to commit we need to provide the message

For every commit , commit id will be generated. This Commit id is hash which is hexadecimal number of 40 characters.

For every commit git records below are tracked:
author name and mail id
timestamp
commit message

git commit -a -m "Commiting and staging file at same time" => It only works when file is already in staging area

5. git log:
----------------
It shows history of all commits
commit it
author name and mail id
timestamp
commit message



Master is the most recent commit. Master is pointed by another reference HEAD.(Symbolic reference =>  Reference to another reference)

git config:
---------------
This command can be used for git configuration like username, email id, etc.

git config --list
	To listout all the git configutations

git config user.name
	Display user name configured for git

git config user.name "New Name"
	It will override the old username with new name

git --global config user.name "New Name"

without global config vs with global config
------------------------------------------
For all repo which is managed by current git==>global

Without global means: configuration applicable for current repo.

It is recommended not to use global we might have to work on multiple project where remote repo are different and username also need to be different.

git log:
--------
If we want to see history of all commits in local repository we can use git log command
It's most commonly used command

cat > z.txt
Hello first line inside z.txt

git ls-files //New files are not tracked by default

git add z.txt //It starts tracking now

git commit -m " A new file z.txt added" //File commited to local repo

git status //Nothing is there as everything is committed

git log // Its going to display all the commit history that has been done as of now in the local repo.

git log provides detailed log information
	commit id, author, date, commit message

Optional commands available with git log command:
-------------------------------------------
git log --help //Provides the help menu for git log command

How to see log information of a particular file:
---------------------------------------------

git log z.txt

Option-1: --oneline option to get brief information
git log 
	detailed information
	commit Id(40 chars)
	author name and email
	timestamp
	commit message

git log --oneline
	display one line per commit
	commit Id(7 chars)+ commit message

**** This option is very helpful if we have lot of commits and to identify commit based on message.

Option-2: -n option to limit the number of commits to display:
---------------------------------------------------
git log -n 2 => It will show the last two commits
git log -3 => display last 3 commits
git log --max-count=4 =>  display last 4 commits

Option-3: --grep option to search based on given pattern in the commit message.

git log --grep="added" => It will display all the commit with message where added string is available

Option-4: Show commits more recent than a specific date or time.
------------------------------------------------

--since="2022-04-01" => After 25 do we have any commit

--after="2022-04-01"

--after="10 days ago"

--after="3 hours ago"
--after="3 hours 5 minutes ago"
--after="10 minutes ago"

Option-5: Show commits older than a specific time
-------------------------------------------------
git log --until="2022-02-02"
git log --before="2022-02-02"

Option-6: Show  commits based on author:
---------------------------------------------
git log --author="Name of author"

Option-7: --decorate option to display extra information
--------------------------------------------
branch, name, HEAD, tags information etc

git log --decorate





